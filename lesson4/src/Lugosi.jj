PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <LET: "let">
| <SEMICOLON: ";">
| <TYPE_FLOAT: "float">
| <TYPE_BOOL: "bool">
| <ASSINGMENT: ":=">
| <OPEN_PARENTHESIS: "(">
| <CLOSE_PARENTHESIS: ")">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <READIO: "readIO">
| <RETURN: "return">
| <PRINTIO: "printIO">
| <TRUE: "true">
| <FALSE: "false">
| <OP_PLUS: "+">
| <OP_MINUS: "-">
| <OP_MULTIPLICATION: "*">
| <OP_DIVISION: "/">
| <OP_LOGIC_AND: "&&">
| <OP_LOGIC_OR: "||">
| <COMPARISON_LESS_THAN: "<">
| <COMPARISON_GREATER_THAN: ">">
| <COMPARISON_EQUALS: "==">
| <COMMA: ",">
| <DEF: "def">
}

TOKEN :
{
  <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E"("+" | "-")? (["0"-"9"])+)?>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ( ["a"-"z","A"-"Z","0"-"9", "_"])*>
}



void Lugosi () :
{Token t;}
{

(
  main() (func())? <EOF> 
)
}

void main () : 
{}
{
  <VOID> <MAIN> <ACHAVES> vardecl() seqcomandos() <FCHAVES>
}

void vardecl() :
{}
{
  (<LET> tipo() <ID> <SEMICOLON>)*
}

void tipo() :
{}
{
  <VOID> | <TYPE_BOOL> | <TYPE_FLOAT>
}

void seqcomandos() :
{}
{
  (comando())*
}

void comando() :
{}
{
  <ID> idL()
  | <IF> exp() <ACHAVES> seqcomandos() <FCHAVES> <SEMICOLON>
  | <WHILE> exp() <DO> <ACHAVES> seqcomandos() <FCHAVES> <SEMICOLON>
  | <RETURN> exp() <SEMICOLON>
  | <PRINTIO> exp() <SEMICOLON> 
}

void idL() :
{}
{
  <ASSINGMENT> assignmentL()
  | <OPEN_PARENTHESIS> (listaexp())? <CLOSE_PARENTHESIS> <SEMICOLON>
}

void assignmentL() :
{}
{
exp() <SEMICOLON> 
| <READIO> <OPEN_PARENTHESIS> <CLOSE_PARENTHESIS> <SEMICOLON>
}

void exp() :
{}
{
  <OPEN_PARENTHESIS> exp() op() exp() <CLOSE_PARENTHESIS> 
  | fator()
}

void fator() :
{}
{
  <ID> (<OPEN_PARENTHESIS> (listaexp())? <CLOSE_PARENTHESIS>)?
  | <NUM>
  | <TRUE>
  | <FALSE>
}

void op() :
{}
{
  <OP_PLUS>
  | <OP_MINUS>
  | <OP_MULTIPLICATION>
  | <OP_DIVISION>
  | <OP_LOGIC_AND>
  | <OP_LOGIC_OR>
  | <COMPARISON_EQUALS>
  | <COMPARISON_LESS_THAN>
  | <COMPARISON_GREATER_THAN>
}

void listaexp() :
{}
{
  exp() (<COMMA> exp())*
}


void func () :
{}
{
  (<DEF> tipo() <ID> <OPEN_PARENTHESIS> (listaarg())? <CLOSE_PARENTHESIS> <ACHAVES> vardecl() seqcomandos() <FCHAVES>)+
}

void listaarg():
{}
{
  tipo() <ID> (<COMMA> tipo() <ID>)*
}