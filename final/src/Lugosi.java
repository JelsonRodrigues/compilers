/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import java.io.*;
import ast.*;

public class Lugosi implements LugosiConstants {

  public static void main(String args[]) throws ParseException,IOException {

  Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
  var prog = analisador.Lugosi();
  }

  static final public Prog Lugosi() throws ParseException {
  Main main_gen;
  ArrayList<Fun> functions=new ArrayList();
    main_gen = main();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      functions = func();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
 {if (true) return new Prog(main_gen, functions);}
    throw new Error("Missing return statement in function");
  }

  static final public Main main() throws ParseException {
  ArrayList<VarDecl> vars_gen = new ArrayList();
  ArrayList<Comando> coms_gen = new ArrayList();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vars_gen = vardecl();
    coms_gen = seqcomandos();
    jj_consume_token(FCHAVES);
   {if (true) return new Main(vars_gen, coms_gen);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> vardecl() throws ParseException {
  ArrayList<VarDecl> building_vars = new ArrayList();
  String type;
  Token id;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(LET);
      type = tipo();
      id = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                                          building_vars.append(new VarDecl(type, id));
    }
   {if (true) return building_vars;}
    throw new Error("Missing return statement in function");
  }

  static final public String tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
          {if (true) return "VOID";}
      break;
    case TYPE_BOOL:
      jj_consume_token(TYPE_BOOL);
                 {if (true) return "BOOL";}
      break;
    case TYPE_FLOAT:
      jj_consume_token(TYPE_FLOAT);
                  {if (true) return "FLOAT";}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Comando> seqcomandos() throws ParseException {
  ArrayList<Comando> coms_building = new ArrayList();
  Comando com;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      com = comando();
                  coms_building.append(com);
    }
   {if (true) return coms_building;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando comando() throws ParseException {
  Token id;
  Exp exp;
  Comando com;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      com = idL(id.image, id.beginLine);
      break;
    case IF:
      jj_consume_token(IF);
      exp = exp();
      jj_consume_token(ACHAVES);
      seqcomandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      exp();
      jj_consume_token(DO);
      jj_consume_token(ACHAVES);
      seqcomandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      exp();
      jj_consume_token(SEMICOLON);
      break;
    case PRINTIO:
      jj_consume_token(PRINTIO);
      exp();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Comando idL(String var, int line) throws ParseException {
  Comando com;
  Exp exp;
  ArrayList<Exp> building_exp = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGMENT:
      jj_consume_token(ASSINGMENT);
      com = assignmentL(var, line);
                                           {if (true) return com;}
      break;
    case OPEN_PARENTHESIS:
      jj_consume_token(OPEN_PARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PARENTHESIS:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        listaexp(building_exp);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARENTHESIS);
      jj_consume_token(SEMICOLON);
                                                                                   {if (true) return new EChamadaFun(line, var, building_exp);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando assignmentL(String var, int line) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PARENTHESIS:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      exp = exp();
      jj_consume_token(SEMICOLON);
                        {if (true) return new CAtribuicao(line, var, exp);}
      break;
    case READIO:
      jj_consume_token(READIO);
      jj_consume_token(OPEN_PARENTHESIS);
      jj_consume_token(CLOSE_PARENTHESIS);
      jj_consume_token(SEMICOLON);
                                                               {if (true) return new CReadInput(line, var);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp exp() throws ParseException {
  Exp ex1;
  Exp ex2;
  String op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PARENTHESIS:
      jj_consume_token(OPEN_PARENTHESIS);
      ex1 = exp();
      op = op();
      ex2 = exp();
      jj_consume_token(CLOSE_PARENTHESIS);
                                                                       {if (true) return new EOpExp(op, ex1, ex2);}
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      ex1 = fator();
                 {if (true) return ex1;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp fator(Exp exp) throws ParseException {
  Token id;
  boolean matched_func = false;
  ArrayList<Exp> building_exp = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PARENTHESIS:
        jj_consume_token(OPEN_PARENTHESIS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_PARENTHESIS:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          building_exp = listaexp(building_exp);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(CLOSE_PARENTHESIS);
                                                                                          matched_func=true;
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    if (matched_func) {
      {if (true) return new EChamadaFun(id.image, building_exp);}
    }
    {if (true) return new EVar(id.image);}
      break;
    case NUM:
      id = jj_consume_token(NUM);
              {if (true) return new EFloat(Float.parse(id.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
            {if (true) return new ETrue();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
             {if (true) return new EFalse();}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String op(String operation) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_PLUS:
      jj_consume_token(OP_PLUS);
              {if (true) return "+";}
      break;
    case OP_MINUS:
      jj_consume_token(OP_MINUS);
                 {if (true) return "-";}
      break;
    case OP_MULTIPLICATION:
      jj_consume_token(OP_MULTIPLICATION);
                          {if (true) return "*";}
      break;
    case OP_DIVISION:
      jj_consume_token(OP_DIVISION);
                    {if (true) return "/";}
      break;
    case OP_LOGIC_AND:
      jj_consume_token(OP_LOGIC_AND);
                     {if (true) return "&&";}
      break;
    case OP_LOGIC_OR:
      jj_consume_token(OP_LOGIC_OR);
                    {if (true) return "||";}
      break;
    case COMPARISON_EQUALS:
      jj_consume_token(COMPARISON_EQUALS);
                          {if (true) return "==";}
      break;
    case COMPARISON_LESS_THAN:
      jj_consume_token(COMPARISON_LESS_THAN);
                             {if (true) return "<=";}
      break;
    case COMPARISON_GREATER_THAN:
      jj_consume_token(COMPARISON_GREATER_THAN);
                                {if (true) return ">=";}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> listaexp(ArrayList<Exp> building_exp) throws ParseException {
 Exp ex1;
Exp ex2;
    ex1 = exp();
              building_exp.append(ex1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ex2 = exp();
                                                             building_exp.append(ex2);
    }
   {if (true) return building_exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Fun> func() throws ParseException {
  String type;
  ArrayList<Fun> building_functions = new ArrayList();
  ArrayList<ParamFormalFun> args;
  ArrayList<VarDecl> vardecl;
  ArrayList<Comando> commands;
  Token id;
    label_4:
    while (true) {
      jj_consume_token(DEF);
      type = tipo();
      id = jj_consume_token(ID);
      jj_consume_token(OPEN_PARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case TYPE_FLOAT:
      case TYPE_BOOL:
        args = listaarg();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARENTHESIS);
      jj_consume_token(ACHAVES);
      vardecl = vardecl();
      commands = seqcomandos();
      jj_consume_token(FCHAVES);
   building_functions.append(new Fun(id.image, args, type, vardecl, commands));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
   {if (true) return building_functions;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> listaarg() throws ParseException {
  ArrayList<ParamFormalFun> building_args = new ArrayList();
  String type;
  Token id;
    type = tipo();
    id = jj_consume_token(ID);
                       building_args.append(new ParamFormalFun(type, id.image));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      type = tipo();
      id = jj_consume_token(ID);
                                                                                                                building_args.append(new ParamFormalFun(type, id.image));
    }
   {if (true) return building_args;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x200,0x1900,0x330000,0x330000,0xc04000,0x6000,0xc84000,0xc04000,0xc04000,0x4000,0xc00000,0xff000000,0x0,0x1900,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x10,0x10,0x18,0x0,0x18,0x18,0x18,0x0,0x18,0x1,0x2,0x0,0x4,0x2,};
   }

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
